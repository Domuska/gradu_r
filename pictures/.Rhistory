install.packages("ggplot2")
library(ggplot2)
data("diamonds")
summary(diamonds)
qplot(x = price, data = diamonds, binwidth = 250,
fill = I("Blue"),
color = I("Red")) +
coord_cartesian(xlim = c(0, 17000))
qplot(x = price, data = diamonds, binwidth = 250,
fill = I("#FF69B4"),
color = I("Red")) +
coord_cartesian(xlim = c(0, 17000))
qplot(x = price, data = diamonds, binwidth = 100,
fill = I("#FF69B4"),
color = I("Red")) +
coord_cartesian(xlim = c(0, 17000))
qplot(x = price, data = diamonds, binwidth = 50,
fill = I("#FF69B4"),
color = I("Red")) +
coord_cartesian(xlim = c(0, 6000))
qplot(x = price, data = diamonds, binwidth = 50,
fill = I("#FF69B4"),
color = I("Red")) +
coord_cartesian(xlim = c(12000, 17000))
coord_cartesian(xlim = c(200, 5000))
qplot(x = price, data = diamonds, binwidth = 50,
fill = I("#FF69B4"),
color = I("Red")) +
coord_cartesian(xlim = c(200, 5000))
install.packages("gridExtra")
library(gridExtra)
names(diamonds)
summary(diamond$cut)
summary(diamonds$cut)
?is
qplot(x = price, data = subset(diamonds, diamonds$cut == "Fair"), binwidth = 50,
fill = I("#FF69B4"),
color = I("Red"))
qplot(x = price, data = subset(diamonds, diamonds$cut == "Fair"), binwidth = 50,
fill = I("#1811db"),
color = I("#f4eb42"))
qplot(x = price, data = subset(diamonds, diamonds$cut == "Fair"), binwidth = 50,
fill = I("#1811db"),
color = I("#000000"))
grid.arrange(fairCutPlot, goodCutPlot, ncol = 1)
fairCutPlot <- qplot(x = price, data = subset(diamonds, diamonds$cut == "Fair"), binwidth = 50,
fill = I("#1811db"),
color = I("#000000"))
goodCutPlot <- qplot(x = price, data = subset(diamonds, diamonds$cut == "Good"), binwidth = 50,
fill = I("#7d11db"),
color = I("#000000"))
grid.arrange(fairCutPlot, goodCutPlot, ncol = 1)
veryGoodCutPlot <- qplot(x = price, data = subset(diamonds, diamonds$cut == "Very Good"), binwidth = 50,
fill = I("#d111db"),
color = I("#000000"))
premiumCutPlot <- qplot(x = price, data = subset(diamonds, diamonds$cut == "Premium"), binwidth = 50,
fill = I("#db118a"),
color = I("#000000"))
idealCutPlot <- qplot(x = price, data = subset(diamonds, diamonds$cut == "Ideal"), binwidth = 50,
fill = I("#db1139"),
color = I("#000000"))
grid.arrange(fairCutPlot, goodCutPlot, veryGoodCutPlot, premiumCutPlot, idealCutPlot ncol = 1)
grid.arrange(fairCutPlot, goodCutPlot, veryGoodCutPlot, premiumCutPlot, idealCutPlot, ncol = 1)
cartesianLimiter <- coord_cartesian(xlim = c(200, 5000))
fairCutPlot <- qplot(x = price, data = subset(diamonds, diamonds$cut == "Fair"), binwidth = 50,
fill = I("#1811db"),
color = I("#000000")) + cartesianLimiter
goodCutPlot <- qplot(x = price, data = subset(diamonds, diamonds$cut == "Good"), binwidth = 50,
fill = I("#7d11db"),
color = I("#000000")) + cartesianLimiter
veryGoodCutPlot <- qplot(x = price, data = subset(diamonds, diamonds$cut == "Very Good"), binwidth = 50,
fill = I("#d111db"),
color = I("#000000")) + cartesianLimiter
premiumCutPlot <- qplot(x = price, data = subset(diamonds, diamonds$cut == "Premium"), binwidth = 50,
fill = I("#db118a"),
color = I("#000000")) + cartesianLimiter
idealCutPlot <- qplot(x = price, data = subset(diamonds, diamonds$cut == "Ideal"), binwidth = 50,
fill = I("#db1139"),
color = I("#000000")) + cartesianLimiter
grid.arrange(fairCutPlot, goodCutPlot, veryGoodCutPlot, premiumCutPlot, idealCutPlot, ncol = 1)
by(diamonds$price, diamond$cut, summary)
by(diamonds$price, diamonds$cut, summary)
qplot(x = price, data = diamonds) + facet_wrap(~cut)
?facet_wrap
qplot(x = price, data = diamonds) + facet_wrap(~cut)
qplot(x = price, data = diamonds) + facet_wrap(~cut)
qplot(x = price, data = diamonds) + facet_wrap(~cut)
qplot(x = price, data = diamonds) + facet_wrap(~cut)
qplot(x = price, data = diamonds) + facet_wrap(~cut, scales = "fixed")
qplot(x = price, data = diamonds) + facet_wrap(~cut, scales = "free")
summary(diamonds$carat)
summary(diamonds)
?mean
mean(diamonds$carat)
qplot(x = (carat/meanCarats)*diamonds$price, data = diamonds) + facet_wrap(~cut)
meanCarats <- diamonds$carat
qplot(x = (carat/meanCarats)*diamonds$price, data = diamonds) + facet_wrap(~cut)
qplot(x = (carat/meanCarats)*diamonds$price, data = diamonds) + facet_wrap(~cut, scales = "free")
qplot(x = (carat/meanCarats)*diamonds$price, data = diamonds,
xlab = "price per carat") +
facet_wrap(~cut, scales = "free")
qplot(x = (carat/meanCarats)*diamonds$price, data = diamonds,
xlab = "price per carat") +
facet_wrap(~cut, scales = "free") +
scale_x_log10()
qplot(x = color, y = price, data = diamonds, geom = "boxplot")
by(diamonds$color, diamonds$price, summary)
by(diamonds$color, diamonds$price, sum)
by(diamonds$price, diamonds$color, sum)
by(diamonds$price, diamonds$color, summary)
qplot(x = color, y = price, data = diamonds, geom = "boxplot") +
coord_cartesian(ylim = c(0, 7000))
qplot(x = color, y = price, data = diamonds, geom = "boxplot") +
coord_cartesian(ylim = c(0, 7500))
by(diamonds$price, diamonds$color, summary)
?diamonds$color
?diamonds
qplot(x = clarity, y = price, data = diamonds, geom = "boxplot")
by(diamonds$price, diamonds$clarity, summary)
qplot(x = clarity, y = price, data = diamonds, geom = "boxplot") +
coord_cartesian(ylim = c(0, 6500))
summary(diamonds$color)
by(diamonds$price, diamonds$color == "D", summary)
by(diamonds$price, diamonds$color == "J", summary)
IQR(subset(diamonds, color = "J")$price)
IQR(subset(diamonds, color = "D")$price)
jColorDiamonds <- subset(diamonds, color = "J")
summary(jColorDiamonds)
?IQR
IQR(jColorDiamonds$price)
source('C:/Edu/Udacity/Data analysis with R/problem_set_one_variable.R', echo=TRUE)
IQR(jColorDiamonds$price)
IQR(subset(diamonds, color = "D")$price)
data("diamonds")
jColorDiamonds <- subset(diamonds, color = "J")
IQR(jColorDiamonds$price)
IQR(subset(diamonds, color = "D")$price)
dColorDiamonds <- subset(diamonds, color = "D")
summary(dColorDiamonds)
summary(jColorDiamonds)
jColorDiamonds <- subset(diamonds, color == "J")
IQR(jColorDiamonds$price)
IQR(subset(diamonds, color == "D")$price)
qplot(x = color, y = (carat/meanCarats)*diamonds$price, geom = "boxplot")
qplot(x = color, y = (carat/meanCarats)*price, data = diamonds, geom = "boxplot")
meanCarats <- diamonds$carat
qplot(x = color, y = (carat/meanCarats)*price, data = diamonds, geom = "boxplot")
by((carat/meanCarats)*diamonds$price, diamonds$color, summary)
meanCarats <- diamonds$carat
by((carat/meanCarats)*diamonds$price, diamonds$color, summary)
by((diamonds$carat/meanCarats)*diamonds$price, diamonds$color, summary)
qplot(x = color, y = (carat/meanCarats)*price, data = diamonds, geom = "boxplot") +
coord_cartesian(ylim = c(0,7800))
qplot(x = color, y = (carat/meanCarats)*price, data = diamonds, geom = "boxplot", fill = color) +
coord_cartesian(ylim = c(0,7800))
summary(diamonds$carat)
diamond_0.1 <- subset(diamonds, weight == 0.1)
diamond_0.1 <- subset(diamonds, carats == 0.1)
diamond_0.1 <- subset(diamonds, carat == 0.1)
diamond_0.1
diamond_0.3 <- subset(diamonds, carat == 0.3)
diamond_0.3
?diamonds
nrows(diamond_0.3)
?nrows
?nrow
nrow(diamond_0.3)
diamond_0.8 <- subset(diamonds, carat == 0.8)
diamond_1.6 <- subset(diamonds, carat == 1.6)
diamond_1.01 <- subset(diamonds, carat == 1.01)
diamond_2.0 <- subset(diamonds, carat == 2.0)
diamond_3.0 <- subset(diamonds, carat == 3.0)
diamond_5.0 <- subset(diamonds, carat == 5.0)
nrow(diamond_0.8)
nrow(diamond_1.01)
nrow(diamond_1.6)
nrow(diamond_2.0)
nrow(diamond_3.0)
nrow(diamond_5.0)
summary(diamonds)
qplot(x = carat, data = diamonds, geom = "freqpoly", color = carat)
qplot(x = carat, data = diamonds, geom = "freqpoly", color = carat, binwidth = 0.1)
qplot(x = carat, data = diamonds,
geom = "freqpoly", color = carat,
binwidth = 0.1) +
scale_x_continuous(breaks = number_ticks(15))
number_ticks <- function(n) {function(limits) pretty(limits, n)}
qplot(x = carat, data = diamonds,
geom = "freqpoly", color = carat,
binwidth = 0.1) +
scale_x_continuous(breaks = number_ticks(15))
number_ticks <- function(n) {function(limits) pretty(limits, n)}
qplot(x = carat, data = diamonds,
geom = "freqpoly", color = carat,
binwidth = 0.1) +
scale_x_continuous(breaks = number_ticks(15))
qplot(x = carat, data = diamonds,
geom = "freqpoly", color = carat,
binwidth = 0.1)
qplot(x = carat, data = diamonds,
geom = "freqpoly", color = carat,
binwidth = 0.1) +
scale_x_continuous(breaks = number_ticks(15))
qplot(x = carat, data = diamonds,
geom = "freqpoly", color = carat,
binwidth = 0.1) +
scale_x_continuous(breaks = number_ticks(10))
qplot(x = carat, data = diamonds,
geom = "freqpoly", color = carat,
binwidth = 0.1) +
scale_x_continuous(breaks = round(seq(min(dat$x), max(dat$x), by = 0.5),1))
qplot(x = carat, data = diamonds,
geom = "freqpoly", color = carat,
binwidth = 0.1) +
scale_x_continuous(breaks = round(seq(min(diamonds$carat), max(diamonds$carat), by = 0.5),1))
qplot(x = carat, data = diamonds,
geom = "freqpoly", color = carat,
binwidth = 0.1) +
scale_x_continuous(breaks = round(seq(min(diamonds$carat), max(diamonds$carat), by = 0.1),1))
qplot(x = carat, data = diamonds,
geom = "freqpoly", color = carat,
binwidth = 0.1) +
scale_x_continuous(breaks = round(seq(min(diamonds$carat), max(diamonds$carat), by = 0.3),1))
summary(diamond_0.3)
nrow(diamond_0.3)
setwd("C:/Edu/Udacity/Data analysis with R/EDA_Course_Materials/EDA_Course_Materials")
unemployed <- read.csv("indicator_t 25-54 unemploy.csv")
summary(unemployed)
View(unemployed)
unemployed_t <- t(unemployed)
View(unemployed_t)
unemployed <- read.csv("indicator_t 25-54 unemploy.csv")
summary(unemployed)
View(unemployed)
setwd("C:/Edu/Udacity/Data analysis with R/EDA_Course_Materials/EDA_Course_Materials")
unemployed <- read.csv("indicator_t 25-54 labour to pop percent.csv")
labor <- read.csv("indicator_t 25-54 labour to pop percent.csv")
summary(labor)
unemployed_t <- t(labor)
labor <- read.csv("indicator_t 25-54 labour to pop percent.csv")
summary(labor)
summary(labor)
View(labor)
birthdays <- read.csv("birthdaysExample.csv")
summary(birthdays)
View(birthdays)
birthdays$shared <- NA
birthdays$shared <- ifelse(birthdays$dates == "22/6/14")
birthdays$shared <- ifelse(birthdays$dates == "22/6/14", 1, 0)
sum(birthdays$shared == 1)
birthdays$shared <- ifelse(birthdays$dates == 22/6/14, 1, 0)
sum(birthdays$shared == 1)
birthdays$shared <- ifelse(birthdays$dates == `22/6/14`, 1, 0)
birthdays$dates[1,0]
birthdays$dates[1,]
?lubridate
install.packages("lubridate")
setwd("C:/Edu/Udacity/Data analysis with R/EDA_Course_Materials/EDA_Course_Materials")
install.packages("lubridate")
library(lubridate)
?lubridate
mdy(birthdays$dates)
parsed_bdays <- mdy(birthdays$dates)
parsed_bdays
sum(parsed_bdays == "2014-06-22")
?strptime
dates <- c(birthdays)
dates
dates <- c(birthdays$dates)
dates
strptime(dates, "%d/%m/%y")
birthdays$formatdate <- strptime(dates, "%m/%d/%y")
birthdays$formatdate
birthdays$formatdate <- strptime(birthdays$dates, "%m/%d/%y")
birthdays
View(birthdays)
birthdays <- mutate(bdays, bdaymonth = month(birthdays$formatdate, label = TRUE, abbr = FALSE),
wdaymonth = wday(birthdays$formatdate, label = TRUE, abbr = FALSE),
mdaymonth = day(birthdays$formatdate)))
birthdays <- mutate(bdays, bdaymonth = month(birthdays$formatdate, label = TRUE, abbr = FALSE),
wdaymonth = wday(birthdays$formatdate, label = TRUE, abbr = FALSE),
mdaymonth = day(birthdays$formatdate))
?mutate
install.packages("dplyr")
library(dplyr)
birthdays <- mutate(bdays, bdaymonth = month(birthdays$formatdate, label = TRUE, abbr = FALSE),
wdaymonth = wday(birthdays$formatdate, label = TRUE, abbr = FALSE),
mdaymonth = day(birthdays$formatdate))
View(birthdays)
View(birthdays)
birthdays <- mutate(birthdays, bdaymonth = month(birthdays$formatdate, label = TRUE, abbr = FALSE),
wdaymonth = wday(birthdays$formatdate, label = TRUE, abbr = FALSE),
mdaymonth = day(birthdays$formatdate))
?lubridate
month(birthdays$formatdate)
birthdays$month <- month(birthdays$formatdate)
birthdays$day <- day(birthdays$formatdate)
qplot(x = month, data = birthdays)
library(qplot)
library(ggplot)
library(ggplot2)
qplot(x = month, data = birthdays)
qplot(x = month, data = birthdays, binwidth = 1,
colors = month)
qplot(x = month, data = birthdays, binwidth = 1,
fill = month)
ggplot(aes(month), data = birthday)
ggplot(aes(month), data = birthdays)
ggplot(aes(month), data = birthdays) +
geom_bar(aes(fill = month)) +
stat_bin(aes(label = ..count..), geom = "text")
birthdays$month <- month(birthdays$formatdate, label = TRUE, abbr = FALSE)
ggplot(aes(month), data = birthdays) +
geom_bar(aes(fill = month)) +
stat_bin(aes(label = ..count..), geom = "text")
birthdays$month_number <- month(birthdays$formatdate)
ggplot(aes(month_number), data = birthdays) +
geom_bar(aes(fill = month_number)) +
stat_bin(aes(label = ..count..), geom = "text")
ggplot(aes(month), data = birthdays) +
geom_bar(aes(fill = month_number)) +
stat_bin(aes(label = ..count..), geom = "text")
ggplot(aes(month_number), data = birthdays) +
geom_bar(aes(fill = month)) +
stat_bin(aes(label = ..count..), geom = "text")
ggplot(aes(month_number), data = birthdays) +
geom_bar(aes(fill = month))
ggplot(aes(month_number), data = birthdays) +
geom_bar(aes(fill = month)) +
stat_bin(aes(label = ..count..), geom = "text")
ggplot(aes(month_number), data = birthdays) +
geom_bar(aes(fill = month))
ggplot(aes(month_number), data = birthdays) +
geom_bar(aes(fill = month)) +
stat_bin(aes(label = ..count..), geom = "text")
ggplot(aes(month_number), data = birthdays) +
geom_bar(aes(fill = month))
birthdays$weekday <- wday(birthdays$formatdate)
birthdays$weekday <- wday(birthdays$formatdate, label = TRUE, abbr = FALSE)
ggplot(aes(day), data = birthdays) +
geom_bar(aes(fill = day))
ggplot(aes(weekday), data = birthdays) +
geom_bar(aes(fill = weekday))
ggplot(aes(weekday), data = birthdays) +
geom_bar(aes(fill = weekday)) +
xlab("Day of the week") +
ylab("Number of birthdays on the day")
setwd("C:/Gradu/android_testing_results/combined_results/notes")
library(ggplot2)
notes_appium <- read.csv("appium_notes.csv")
notes_appium <- notes_appium[!(notes_appium$failures != 0),]
notes_appium$toolname <- "Appium"
notes_espresso <- read.csv("espresso_notes.csv")
notes_espresso <- notes_espresso[!(notes_espresso$failures != 0),]
notes_espresso$toolname <- "Espresso"
notes_robotium <- read.csv("robotium_notes.csv")
notes_robotium <- notes_robotium[!(notes_robotium$failures != 0),]
notes_robotium$toolname <- "Robotium"
notes_uiautomator <- read.csv("uiautomator_notes.csv")
notes_uiautomator <- notes_uiautomator[!(notes_uiautomator$failures != 0),]
notes_uiautomator$toolname <- "UiAutomator"
notes_tau <- read.csv("tau_notes.csv")
notes_tau$toolname <- "Tau"
View(notes_appium)
View(notes_espresso)
View(notes_tau)
notes_combined <- rbind(notes_appium, notes_espresso,
notes_robotium, notes_uiautomator, notes_tau)
View(notes_combined)
ggplot(notes_combined, aes(x = toolname, y = runTime_seconds)) +
geom_boxplot() +
xlab("Name of the tool") +
ylab("Test set run time in seconds")
setwd("C:/Gradu/gradu_r/pictures")
png(filename="notes_boxplot.png")
ggplot(notes_combined, aes(x = toolname, y = runTime_seconds)) +
geom_boxplot() +
xlab("Name of the tool") +
ylab("Test set run time in seconds")
dev.off()
setwd("C:/Users/Tomi/testAutomation/measurements/combined_results/amaze")
setwd("C:/Gradu/android_testing_results/combined_results/amaze")
appium_frame <- read.csv("appium_amaze.csv")
appium_frame <- appium_frame[!(appium_frame$failures != 0),]
espresso_frame <- read.csv("espresso_amaze.csv")
espresso_frame <- espresso_frame[!(espresso_frame$failures != 0),]
robotium_frame <- read.csv("robotium_amaze.csv")
robotium_frame <- robotium_frame[!(robotium_frame$failures != 0),]
uiautomator_frame <- read.csv("uiautomator_amaze.csv")
uiautomator_frame <- uiautomator_frame[!(uiautomator_frame$failures != 0),]
tau_frame <- read.csv("tau_amaze.csv")
appium_frame$toolname <- "Appium"
espresso_frame$toolname <- "Espresso"
robotium_frame$toolname <- "Robotium"
uiautomator_frame$toolname <- "UiAutomator"
tau_frame$toolname <- "Tau"
combined_frame <- rbind(appium_frame, espresso_frame, robotium_frame, uiautomator_frame, tau_frame)
setwd("C:/Gradu/android_testing_results/combined_results/wikipedia")
appium_frame_n <- read.csv("appium_wifi_native.csv")
appium_frame_n <- appium_frame_n[!(appium_frame_n$failures != 0),]
espresso_frame_n <- read.csv("espresso_wifi_native.csv")
espresso_frame_n <- espresso_frame_n[!(espresso_frame_n$failures != 0),]
uiautomator_frame_n <- read.csv("uiautomator_wifi_native.csv")
uiautomator_frame_n <- uiautomator_frame_n[!(uiautomator_frame_n$failures != 0),]
tau_frame_n <- read.csv("tau_wifi_native.csv")
appium_frame_n$toolname <- "Appium"
espresso_frame_n$toolname <- "Espresso"
robotium_frame$toolname <- "Robotium"
uiautomator_frame_n$toolname <- "UiAutomator"
tau_frame_n$toolname <- "Tau"
combined_frame <- rbind(appium_frame_n, espresso_frame_n, uiautomator_frame_n, tau_frame_n)
combined_frame_amaze <- rbind(appium_frame, espresso_frame, robotium_frame, uiautomator_frame, tau_frame)
combined_frame_wikipedia_n <- rbind(appium_frame_n, espresso_frame_n, uiautomator_frame_n, tau_frame_n)
combined_frame_all <- rbind(combined_frame_amaze, combined_frame_wikipedia_n, notes_combined)
ggplot(combined_frame_all, aes(x = toolname, y = runTime_seconds)) +
geom_boxplot() +
xlab("Name of the tool") +
ylab("Test set run time in seconds")
notes_appium$toolname <- "Appium Notes"
notes_espresso$toolname <- "Espresso Notes"
notes_robotium$toolname <- "Robotium Notes"
notes_uiautomator$toolname <- "UiAutomator Notes"
notes_tau$toolname <- "Tau Notes"
notes_combined <- rbind(notes_appium, notes_espresso,
notes_robotium, notes_uiautomator, notes_tau)
appium_frame$toolname <- "Appium Amaze"
espresso_frame$toolname <- "Espresso Amaze"
robotium_frame$toolname <- "Robotium Amaze"
uiautomator_frame$toolname <- "UiAutomator Amaze"
tau_frame$toolname <- "Tau Amaze"
combined_frame_amaze <- rbind(appium_frame, espresso_frame, robotium_frame, uiautomator_frame, tau_frame)
appium_frame_n$toolname <- "Appium Wikipedia"
espresso_frame_n$toolname <- "Espresso Wikipedia"
uiautomator_frame_n$toolname <- "UiAutomator Wikipedia"
tau_frame_n$toolname <- "Tau Wikipedia"
combined_frame_wikipedia_n <- rbind(appium_frame_n, espresso_frame_n, uiautomator_frame_n, tau_frame_n)
combined_frame_all <- rbind(combined_frame_amaze, combined_frame_wikipedia_n, notes_combined)
ggplot(combined_frame_all, aes(x = toolname, y = runTime_seconds)) +
geom_boxplot() +
xlab("Name of the tool") +
ylab("Test set run time in seconds")
setwd("C:/Gradu/gradu_r/pictures")
png(filename="wikipedia_boxplot_native_wifi.png")
ggplot(combined_frame_all, aes(x = toolname, y = runTime_seconds)) +
geom_boxplot() +
xlab("Name of the tool") +
ylab("Test set run time in seconds")
dev.off()
?png
png(filename="all_apps_boxplot_native_wifi.png", width = 960)
ggplot(combined_frame_all, aes(x = toolname, y = runTime_seconds)) +
geom_boxplot() +
xlab("Name of the tool") +
ylab("Test set run time in seconds")
dev.off()
png(filename="all_apps_boxplot_native_wifi.png", width = 1060)
ggplot(combined_frame_all, aes(x = toolname, y = runTime_seconds)) +
geom_boxplot() +
xlab("Name of the tool") +
ylab("Test set run time in seconds")
dev.off()
mean_espresso <- mean(notes_espresso$runTime_seconds)
mean_espresso <- as.numeric(as.character(mean_espresso))
mean_appium <- mean(notes_appium$runTime_seconds)
mean_appium <- as.numeric(as.character(mean_appium))
mean_robotium <- mean(notes_robotium$runTime_seconds)
mean_robotium <- as.numeric(as.character(mean_robotium))
mean_uiautomator <- mean(notes_uiautomator$runTime_seconds)
mean_uiautomator <- as.numeric(as.character(mean_uiautomator))
mean_tau <- mean(notes_tau$runTime_seconds)
mean_tau <- as.numeric(as.character(mean_tau))
mean_espresso
mean_appium
mean_robotium
mean_uiautomator
mean_tau
mean_appium <- mean(appium_frame$runTime_seconds)
mean_appium <- as.numeric(as.character(mean_appium))
mean_espresso <- mean(espresso_frame$runTime_seconds)
mean_espresso <- as.numeric(as.character(mean_espresso))
mean_robotium <- mean(robotium_frame$runTime_seconds)
mean_robotium <- as.numeric(as.character(mean_robotium))
mean_uiautomator <- mean(uiautomator_frame$runTime_seconds)
mean_uiautomator <- as.numeric(as.character(mean_uiautomator))
mean_tau <- mean(tau_frame$runTime_seconds)
mean_tau <- as.numeric(as.character(mean_tau))
mean_appium
mean_espresso
mean_tau
mean_robotium
mean_uiautomator
mean_appium_n <- mean(appium_frame_n$runTime_seconds)
mean_appium_n <- as.numeric(as.character(mean_appium_n))
mean_espresso_n <- mean(espresso_frame_n$runTime_seconds)
mean_espresso_n <- as.numeric(as.character(mean_espresso_n))
mean_uiautomator_n <- mean(uiautomator_frame_n$runTime_seconds)
mean_uiautomator_n <- as.numeric(as.character(mean_uiautomator_n))
mean_tau_n <- mean(tau_frame_n$runTime_seconds)
mean_tau_n <- as.numeric(as.character(mean_tau_n))
mean_appium_n
mean_espresso_n
mean_uiautomator_n
mean_tau_n
